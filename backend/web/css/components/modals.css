/**
 * Modal Components JavaScript
 */

class ModalsComponent {
    constructor() {
        this.init();
    }

    init() {
        this.initModalTriggers();
        this.initModalEvents();
        this.initConfirmDialogs();
        this.initImageModals();
    }

    initModalTriggers() {
        document.querySelectorAll('[data-bs-toggle="modal"]').forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                const targetModal = document.querySelector(trigger.getAttribute('data-bs-target'));
                if (targetModal) {
                    this.prepareModal(targetModal, trigger);
                }
            });
        });
    }

    initModalEvents() {
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('shown.bs.modal', () => {
                const firstInput = modal.querySelector('input:not([type="hidden"]), textarea, select');
                if (firstInput && !firstInput.disabled && !firstInput.readOnly) {
                    firstInput.focus();
                }
            });

            // Handle escape key
            modal.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                }
            });
        });
    }

    initConfirmDialogs() {
        document.querySelectorAll('[data-confirm]').forEach(element => {
            element.addEventListener('click', (e) => {
                const message = element.getAttribute('data-confirm');
                if (!confirm(message)) {
                    e.preventDefault();
                    return false;
                }
            });
        });
    }

    initImageModals() {
        // Create image preview modal for thumbnails
        const imageModal = document.createElement('div');
        imageModal.className = 'modal fade';
        imageModal.id = 'imagePreviewModal';
        imageModal.innerHTML = `
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Podgląd obrazu</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body text-center p-0">
                        <img src="" alt="" class="img-fluid" id="imagePreviewImg">
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(imageModal);

        // Handle image clicks
        document.addEventListener('click', (e) => {
            if (e.target.matches('.img-thumbnail, .preview-image, [data-image-preview]')) {
                e.preventDefault();
                const img = document.getElementById('imagePreviewImg');
                const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
                
                img.src = e.target.src || e.target.dataset.src;
                img.alt = e.target.alt || 'Podgląd obrazu';
                
                modal.show();
            }
        });
    }

    prepareModal(modal, trigger) {
        // Modal-specific preparation based on trigger data
        const dataId = trigger.getAttribute('data-id');
        if (dataId) {
            const idInput = modal.querySelector('input[name="id"]');
            if (idInput) {
                idInput.value = dataId;
            }
        }

        // Handle data attributes
        Object.keys(trigger.dataset).forEach(key => {
            if (key.startsWith('modal')) {
                const inputName = key.replace('modal', '').toLowerCase();
                const input = modal.querySelector(`input[name="${inputName}"], select[name="${inputName}"], textarea[name="${inputName}"]`);
                if (input) {
                    input.value = trigger.dataset[key];
                }
            }
        });
    }

    static showConfirmDialog(message, title = 'Potwierdzenie', options = {}) {
        return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.innerHTML = `
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${title}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-question-circle fa-2x text-warning me-3"></i>
                                <div>${message}</div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                ${options.cancelText || 'Anuluj'}
                            </button>
                            <button type="button" class="btn btn-${options.confirmType || 'primary'}" id="confirm-btn">
                                ${options.confirmText || 'Potwierdź'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            const confirmBtn = modal.querySelector('#confirm-btn');
            const cancelBtns = modal.querySelectorAll('[data-bs-dismiss="modal"]');
            
            confirmBtn.addEventListener('click', () => {
                resolve(true);
                if (typeof bootstrap !== 'undefined') {
                    bootstrap.Modal.getInstance(modal).hide();
                }
            });
            
            cancelBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    resolve(false);
                });
            });
            
            modal.addEventListener('hidden.bs.modal', () => {
                modal.remove();
            });
            
            if (typeof bootstrap !== 'undefined') {
                const bsModal = new bootstrap.Modal(modal);
                bsModal.show();
            } else {
                modal.style.display = 'block';
                modal.classList.add('show');
            }
        });
    }

    static showAlert(message, type = 'info', options = {}) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alert.style.cssText = `
            top: 20px; 
            right: 20px; 
            z-index: 9999; 
            min-width: 300px;
            max-width: 500px;
            animation: slideInRight 0.4s ease-out;
        `;
        
        const iconMap = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle',
            danger: 'exclamation-circle'
        };
        
        alert.innerHTML = `
            <div class="d-flex align-items-start">
                <i class="fas fa-${iconMap[type] || 'info-circle'} me-2 mt-1"></i>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        document.body.appendChild(alert);
        
        // Auto-hide after duration
        const duration = options.duration || 5000;
        if (duration > 0) {
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.style.animation = 'slideOutRight 0.4s ease-out';
                    setTimeout(() => alert.remove(), 400);
                }
            }, duration);
        }
        
        return alert;
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    new ModalsComponent();
});

// Global functions
window.showConfirmDialog = ModalsComponent.showConfirmDialog;
window.showAlert = ModalsComponent.showAlert;

// Add CSS animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    @keyframes slideOutRight {
        from {
            opacity: 1;
            transform: translateX(0);
        }
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
`;
document.head.appendChild(style);